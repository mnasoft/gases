;;;; gases.lisp

(in-package #:gases)

;;; "gases" goes here. Hacks and glory await!

Ar                Ref-Elm. Moore,1971. Gordon,1999.                             
 3 g 3/98 AR  1.00    0.00    0.00    0.00    0.00 0   39.9480000          0.000
    200.000   1000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6197.428
 0.000000000D+00 0.000000000D+00 2.500000000D+00 0.000000000D+00 0.000000000D+00
 0.000000000D+00 0.000000000D+00                -7.453750000D+02 4.379674910D+00
   1000.000   6000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6197.428
 2.010538475D+01-5.992661070D-02 2.500069401D+00-3.992141160D-08 1.205272140D-11
-1.819015576D-15 1.078576636D-19                -7.449939610D+02 4.379180110D+00
   6000.000  20000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6197.428
-9.951265080D+08 6.458887260D+05-1.675894697D+02 2.319933363D-02-1.721080911D-06
 6.531938460D-11-9.740147729D-16                -5.078300340D+06 1.465298484D+03
C                 Hf:Douglas,1955. Moore,1970b. Gordon,1999.                    
 3 g 7/97 C   1.00    0.00    0.00    0.00    0.00 0   12.0107000     716680.000
    200.000   1000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6535.895
 6.495031470D+02-9.649010860D-01 2.504675479D+00-1.281448025D-05 1.980133654D-08
-1.606144025D-11 5.314483411D-15                 8.545763110D+04 4.747924288D+00
   1000.000   6000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6535.895
-1.289136472D+05 1.719528572D+02 2.646044387D+00-3.353068950D-04 1.742092740D-07
-2.902817829D-11 1.642182385D-15                 8.410597850D+04 4.130047418D+00
   6000.000  20000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6535.895
 4.432528010D+08-2.886018412D+05 7.737108320D+01-9.715281890D-03 6.649595330D-07
-2.230078776D-11 2.899388702D-16                 2.355273444D+06-6.405123160D+02
OCCN              Cyanooxomethyl radical. Dorofeeva,2001.                       
 2 srd 01 C   2.00N   1.00O   1.00    0.00    0.00 0   54.0275000     210000.000
    200.000  1000.000 7 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0        13594.351
 2.428801128D+04-5.525864490D+02 8.587838090D+00-3.379387570D-03 1.119841795D-05
-1.008408053D-08 3.086448751D-12 0.000000000D+00 2.599620066D+04-1.659592428D+01
   1000.000  6000.000 7 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0        13594.351
 9.359095680D+05-4.441073340D+03 1.368958451D+01-1.647526929D-03 3.819863520D-07
-3.945148580D-11 1.509592679D-15 0.000000000D+00 4.951216910D+04-5.417083590D+01



("C                 Hf:Douglas,1955. Moore,1970b. Gordon,1999.                    "
 " 3 g 7/97 C   1.00    0.00    0.00    0.00    0.00 0   12.0107000     716680.000"
 "    200.000   1000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6535.895"
 " 6.495031470D+02-9.649010860D-01 2.504675479D+00-1.281448025D-05 1.980133654D-08"
 "-1.606144025D-11 5.314483411D-15                 8.545763110D+04 4.747924288D+00"
 "   1000.000   6000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6535.895"
 "-1.289136472D+05 1.719528572D+02 2.646044387D+00-3.353068950D-04 1.742092740D-07"
 "-2.902817829D-11 1.642182385D-15                 8.410597850D+04 4.130047418D+00"
 "   6000.000  20000.0007 -2.0 -1.0  0.0  1.0  2.0  3.0  4.0  0.0         6535.895"
 " 4.432528010D+08-2.886018412D+05 7.737108320D+01-9.715281890D-03 6.649595330D-07"
 "-2.230078776D-11 2.899388702D-16                 2.355273444D+06-6.405123160D+02")

(defun open-data-file ()
  (defparameter *data-file*
    (open  "/home/namatv/quicklisp/local-projects/clisp/gases/gases/data/termo.inp" :direction :input)))

(defun close-data-file ()
  (close *data-file*))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun read-string (str &optional (ft 's))
  (cond
    ((or (eq ft 'f) (eq ft 'e) (eq ft 'd) (eq ft 'g) (eq ft 'i))
     (if (string= "" str) 0.0 (read (make-string-input-stream str))))
    ((eq ft 's) str)
    (t "Format error!")))

(defun read-record (ln-str-format str)
  (let ((st 0))
    (mapcar
     #'(lambda (el)
	 (let ((rez (string-trim " " (subseq str st (+ (second el) st)))))
	   (setf st (+ st (second el)))
	   (read-string rez (first el))))
     ln-str-format)))

(defun read-el-header ()
  (let* ((rec-1 '((s 18) (s 62)))
	 (rec-2 '((i  2) (s  8) (s  2) (f  6) (s 2) (f 6) (s 2) (f 6) (s 2) (f 6) (s 2) (f 6) (i 2) (f 13) (f 15)))
	 (rec-3 '((f 11) (f 11) (i  1) (f  5) (f 5) (f 5) (f 5) (f 5) (f 5) (f 5) (f 5) (f 17)))
	 (rec-4 '((f 16) (f 16) (f 16) (f 16) (f 16)))
	 (rec-5 '((f 16) (f 16) (f 16) (f 16) (f 16)))
	 (r-1 (read-record rec-1 (read-line *data-file*)))
	 (r-2 (read-record rec-2 (read-line *data-file*)))
	 (n-row (first r-2))
	 (t-int nil))
    (dotimes (i n-row)
      (mapc #'(lambda (el) (push (read-record el (read-line *data-file*)) t-int) )
       (list rec-3 rec-4 rec-5)))
    (list r-1 r-2 (reverse t-int))))

(progn (close-data-file) (open-data-file) (read-line *data-file*) (read-line *data-file*))
  (read-el-header)
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(with-open-file (str "/home/namatv/quicklisp/local-projects/clisp/gases/gases/data/termo.inp" :direction :input)
  (string-right-trim " " )

(defparameter *o* (make-string-output-stream))

(format *o* "~A" 12)

(get-output-stream-string *o*)

(defparameter *i* (make-string-input-stream "(\"as\" 12 ) "))

(read *i*)
